const prisma = require('../lib/prisma');
const moment = require('moment-timezone');

function getTimezoneByCountry(countryCode) {
  const timezoneMap = {
    US: 'America/New_York',
    RU: 'Europe/Moscow',
    UA: 'Europe/Kiev',
    TR: 'Europe/Istanbul',
    GB: 'Europe/London',
    DE: 'Europe/Berlin',
    FR: 'Europe/Paris',
    IT: 'Europe/Rome',
    ES: 'Europe/Madrid',
    PL: 'Europe/Warsaw',
    RO: 'Europe/Bucharest',
    NL: 'Europe/Amsterdam',
    PT: 'Europe/Lisbon',
    SA: 'Asia/Riyadh',
    ID: 'Asia/Jakarta',
    TH: 'Asia/Bangkok',
    VI: 'Asia/Ho_Chi_Minh',
    JA: 'Asia/Tokyo',
    KO: 'Asia/Seoul',
    ZH: 'Asia/Shanghai',
    HE: 'Asia/Jerusalem',
    HI: 'Asia/Kolkata',
    MX: 'America/Mexico_City',
  };
  return timezoneMap[(countryCode || '').toUpperCase()] || 'UTC';
}

function computeLocalAt(date, timezone, daysToAdd) {
  return moment(date).tz(timezone).add(daysToAdd, 'days').hour(23).minute(30).second(0).millisecond(0).toDate();
}

async function ensureNextRecurringForNewPayments() {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∏–º–µ—é—Ç nextRecurringAt
    const payments = await prisma.payment.findMany({
      where: {
        subscriptionReferenceCode: { not: '' },
        nextRecurringAt: null,
        isRecurringActive: true
      }
    });

    console.log(`üìÖ Setting next recurring dates for ${payments.length} new payments`);

    for (const payment of payments) {
      const tz = payment.timezone || getTimezoneByCountry(payment.countryCode);
      const nextAt = computeLocalAt(new Date(), tz, 7);

      await prisma.payment.update({
        where: { id: payment.id },
        data: { nextRecurringAt: nextAt }
      });

      console.log(`‚úÖ Set next recurring for payment ${payment.id}: ${nextAt.toISOString()}`);
    }

    console.log(`‚úÖ Completed setting next recurring dates for ${payments.length} payments`);
  } catch (error) {
    console.error('‚ùå Error setting next recurring dates:', error);
  }
}

async function notifyDbChanged() {
  // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Å–∏—Å—Ç–µ–º—ã
  // –æ —Ç–æ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–∏–ª–∞—Å—å
  console.log('üîÑ Database changed notification sent');
}

module.exports = {
  ensureNextRecurringForNewPayments,
  notifyDbChanged,
  getTimezoneByCountry,
  computeLocalAt
};
