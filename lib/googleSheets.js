const { google } = require('googleapis');

/**
 * –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Google Sheets
 */
class GoogleSheetsManager {
  constructor() {
    this.sheets = null;
    this.spreadsheetId = null;
    this.isInitialized = false;
    this.isDisabled = false; // –§–ª–∞–≥ –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Google Sheets
  }

  
  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
   */
  async initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
      if (!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL || 
          !process.env.GOOGLE_PRIVATE_KEY || 
          !process.env.GOOGLE_SHEET_ID) {
        console.log('‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω - –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
        this.isDisabled = true;
        return false;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞
      let privateKey = process.env.GOOGLE_PRIVATE_KEY;
      
      // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –∫–∞–≤—ã—á–∫–∏ –∏ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      privateKey = privateKey.replace(/^["']|["']$/g, '').replace(/\\n/g, '\n');
      
      // –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç BEGIN/END –º–∞—Ä–∫–µ—Ä—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
      if (!privateKey.includes('-----BEGIN PRIVATE KEY-----')) {
        privateKey = `-----BEGIN PRIVATE KEY-----\n${privateKey}\n-----END PRIVATE KEY-----`;
      }

      // –°–æ–∑–¥–∞–µ–º JWT –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      const auth = new google.auth.JWT({
        email: process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        key: privateKey,
        scopes: ['https://www.googleapis.com/auth/spreadsheets'],
      });

      // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Google Sheets API
      this.sheets = google.sheets({ version: 'v4', auth });
      this.spreadsheetId = process.env.GOOGLE_SHEET_ID;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –∫ —Ç–∞–±–ª–∏—Ü–µ
      await this.sheets.spreadsheets.get({
        spreadsheetId: this.spreadsheetId
      });

      this.isInitialized = true;
      console.log('‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      
      return true;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Google Sheets:', error.message);
      console.error('üîç –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
        hasEmail: !!process.env.GOOGLE_SERVICE_ACCOUNT_EMAIL,
        hasPrivateKey: !!process.env.GOOGLE_PRIVATE_KEY,
        hasSheetId: !!process.env.GOOGLE_SHEET_ID,
        privateKeyLength: process.env.GOOGLE_PRIVATE_KEY ? process.env.GOOGLE_PRIVATE_KEY.length : 0
      });
      console.log('‚ö†Ô∏è Google Sheets –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
      this.isDisabled = true;
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getSheetData(range = 'A:Z') {
    try {
      if (this.isDisabled) {
        console.log('‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö');
        return [];
      }

      if (!this.isInitialized) {
        await this.initialize();
      }

      const response = await this.sheets.spreadsheets.values.get({
        spreadsheetId: this.spreadsheetId,
        range: range,
      });

      return response.data.values || [];
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error.message);
      return [];
    }
  }

  /**
   * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –≤ —Ç–∞–±–ª–∏—Ü—É
   * @param {Object} paymentData - –î–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
   */
  async addPayment(paymentData) {
    try {
      if (this.isDisabled) {
        console.log('‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –ø–ª–∞—Ç–µ–∂–∞');
        console.log('üìä –î–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏:', {
          bid: paymentData.bid,
          firstName: paymentData.firstName,
          lastName: paymentData.lastName,
          plan: paymentData.plan,
          subscriptionId: paymentData.subscriptionId,
          paymentType: paymentData.paymentType
        });
        return { success: true, message: 'Google Sheets disabled' };
      }

      if (!this.isInitialized) {
        await this.initialize();
      }

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É —Å–æ–≥–ª–∞—Å–Ω–æ –ø–ª–∞–Ω—É
      const planPrices = {
        test: 0.01,
        solo: 9.99,
        plus: 19.99,
        premium: 19.99
      };

      const price = planPrices[paymentData.plan] || 9.99;
      const customerName = `${paymentData.firstName || ''} ${paymentData.lastName || ''}`.trim();

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
      const sheetData = await this.getSheetData('B:Z'); // Changed to B:Z to match new structure
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –ø–æ –∏–º–µ–Ω–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–∫–æ–ª–æ–Ω–∫–∞ E, –∏–Ω–¥–µ–∫—Å 3 –≤ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ)
      let existingRow = -1;
      for (let i = 2; i < sheetData.length; i++) {
        if (sheetData[i] && sheetData[i][3] === customerName && customerName !== '') { // Changed from [4] to [3] because Customer Name is now at index 3 (E column)
          existingRow = i;
          break;
        }
      }
      
      console.log(`üîç –ü–æ–∏—Å–∫ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: ${customerName}`);
      console.log(`üìä –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: ${existingRow > -1 ? existingRow + 1 : '–Ω–µ –Ω–∞–π–¥–µ–Ω–∞'}`);
      console.log(`üìù –¢–∏–ø –ø–ª–∞—Ç–µ–∂–∞: ${paymentData.paymentType}`);

      if (existingRow > -1 && (paymentData.paymentType === 'second_payment' || paymentData.paymentType === 'recurring_payment')) {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π —ç—Ç–æ –ø–ª–∞—Ç–µ–∂ (–≤—Ç–æ—Ä–æ–π –∏–ª–∏ –ø–æ—Å–ª–µ–¥—É—é—â–∏–π)
        const currentRow = sheetData[existingRow];
        let updateRange;
        let updateData;
        
        if (paymentData.paymentType === 'second_payment') {
          // –í—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ - –æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ I, J, K
          updateRange = `I${existingRow + 1}:K${existingRow + 1}`;
          updateData = [
            [
              paymentData.price || price, // I - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1 (—Ü–µ–Ω–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
              new Date().toISOString(), // J - –¥–∞—Ç–∞ –≤—Ç–æ—Ä–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
              paymentData.error || 'Success' // K - —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            ]
          ];
          console.log(`‚úÖ –í—Ç–æ—Ä–æ–π –ø–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets (I-K) –¥–ª—è —Å—Ç—Ä–æ–∫–∏ ${existingRow + 1}`);
          console.log(`üí∞ –¶–µ–Ω–∞: ${paymentData.price || price}`);
          console.log(`üìÖ –î–∞—Ç–∞: ${new Date().toISOString()}`);
          console.log(`üìä –î–∏–∞–ø–∞–∑–æ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: ${updateRange}`);
          console.log(`üìù –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:`, updateData[0]);
        } else {
          // –ü–æ—Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞—Ç–µ–∂–∏ - –∏—â–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å–≤–æ–±–æ–¥–Ω—É—é –≥—Ä—É–ø–ø—É –∫–æ–ª–æ–Ω–æ–∫
          // –§–æ—Ä–º–∞—Ç: L-M-N (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ2), O-P-Q (–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ3), –∏ —Ç.–¥.
          const columnGroups = [
            ['L', 'M', 'N'], // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ2
            ['O', 'P', 'Q'], // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ3
            ['R', 'S', 'T'], // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ4
            ['U', 'V', 'W'], // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ5
            ['X', 'Y', 'Z']  // –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ6
          ];
          
          let foundGroup = null;
          for (const group of columnGroups) {
            const [paymentCol, dateCol, statusCol] = group;
            const paymentColIndex = paymentCol.charCodeAt(0) - 65; // A=0, B=1, etc.
            
            if (!currentRow[paymentColIndex] || currentRow[paymentColIndex] === '') {
              foundGroup = group;
              break;
            }
          }
          
          if (foundGroup) {
            const [paymentCol, dateCol, statusCol] = foundGroup;
            updateRange = `${paymentCol}${existingRow + 1}:${statusCol}${existingRow + 1}`;
            updateData = [
              [
                paymentData.price || price, // –°—É–º–º–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                new Date().toISOString(), // –î–∞—Ç–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                paymentData.error || 'Success' // –°—Ç–∞—Ç—É—Å (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
              ]
            ];
            console.log(`‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –æ–±–Ω–æ–≤–ª–µ–Ω –≤ Google Sheets (${paymentCol}-${statusCol})`);
          } else {
            console.log('‚ö†Ô∏è –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞');
            return { success: false, error: 'No available columns' };
          }
        }

        await this.sheets.spreadsheets.values.update({
          spreadsheetId: this.spreadsheetId,
          range: updateRange,
          valueInputOption: 'RAW',
          resource: { values: updateData }
        });

        return { success: true, message: 'Payment updated' };
      } else {
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
        const newRow = [
          paymentData.bid || 'murkafix', // B - BID
          new Date().toISOString(), // C - Created Date (–¥–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          price, // D - Paid Price (—Å—É–º–º–∞ –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          customerName, // E - Customer Name
          paymentData.countryCode || 'US', // F - GEO (req.body.countryCode)
          paymentData.plan || 'test', // G - SUBSCR (req.body.plan)
          paymentData.subscriptionId || '', // H - Subscription ID (req.body.subscriptionId)
          '', // I - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1 (–ø—É—Å—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          '', // J - –¥–∞—Ç–∞ (–ø—É—Å—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          paymentData.error || 'Success' // K - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (—É—Å–ø–µ—Ö –∏–ª–∏ –æ—à–∏–±–∫–∞)
        ];

        await this.sheets.spreadsheets.values.append({
          spreadsheetId: this.spreadsheetId,
          range: 'B:K',
          valueInputOption: 'RAW',
          insertDataOption: 'INSERT_ROWS',
          resource: { values: [newRow] }
        });

        console.log('‚úÖ –ù–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –¥–æ–±–∞–≤–ª–µ–Ω –≤ Google Sheets');
        console.log(`üë§ –ö–ª–∏–µ–Ω—Ç: ${customerName}`);
        console.log(`üåç GEO: ${paymentData.countryCode || 'US'}`);
        console.log(`üìã –ü–ª–∞–Ω: ${paymentData.plan || 'test'}`);
        console.log(`üÜî Subscription ID: ${paymentData.subscriptionId || ''}`);
        console.log(`üìä –î–∞–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏:`, newRow);
        return { success: true, message: 'Payment added' };
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
   */
  async initializeHeaders() {
    try {
      if (this.isDisabled) {
        console.log('‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤');
        return { success: true, message: 'Google Sheets disabled' };
      }

      if (!this.isInitialized) {
        await this.initialize();
      }

      // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
      const headers = [
        '', // A - –ø—É—Å—Ç–∞—è
        'BID', // B - BID
        'Created Date', // C - Created Date
        'Paid Price', // D - Paid Price
        'Customer Name', // E - Customer Name
        'GEO', // F - GEO
        'SUBSCR', // G - SUBSCR
        'Subscription ID', // H - Subscription ID
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1', // I - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1
        '–¥–∞—Ç–∞', // J - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', // K - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ2', // L - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ2
        '–¥–∞—Ç–∞', // M - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', // N - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ3', // O - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ3
        '–¥–∞—Ç–∞', // P - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', // Q - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ4', // R - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ4
        '–¥–∞—Ç–∞', // S - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', // T - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ5', // U - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ5
        '–¥–∞—Ç–∞', // V - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ', // W - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
        '–ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ6', // X - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ6
        '–¥–∞—Ç–∞', // Y - –¥–∞—Ç–∞
        '–ø—Ä–∏–º–µ—á–∞–Ω–∏–µ' // Z - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
      ];

      await this.sheets.spreadsheets.values.update({
        spreadsheetId: this.spreadsheetId,
        range: 'A1:Z1',
        valueInputOption: 'RAW',
        resource: { values: [headers] }
      });

      console.log('‚úÖ –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
      return { success: true, message: 'Headers initialized' };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:', error.message);
      return { success: false, error: error.message };
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î –≤ Google Sheets
   */
  async syncAllPayments() {
    try {
      if (this.isDisabled) {
        console.log('‚ö†Ô∏è Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é');
        return { success: true, message: 'Google Sheets disabled' };
      }

      if (!this.isInitialized) {
        await this.initialize();
      }

      console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –≤—Å–µ—Ö –ø–ª–∞—Ç–µ–∂–µ–π...');
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î
      const { PrismaClient } = require('@prisma/client');
      const prisma = new PrismaClient();
      
      const payments = await prisma.payment.findMany({
        orderBy: {
          createdAt: 'asc'
        }
      });
      
      console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${payments.length} –ø–ª–∞—Ç–µ–∂–µ–π –≤ –ë–î`);
      
      // –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É (–Ω–∞—á–∏–Ω–∞—è —Å 3-–π —Å—Ç—Ä–æ–∫–∏)
      const clearRange = 'B3:Z1000';
      await this.sheets.spreadsheets.values.clear({
        spreadsheetId: this.spreadsheetId,
        range: clearRange
      });
      
      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      const groupedPayments = {};
      payments.forEach(payment => {
        const userKey = payment.userHash || payment.email;
        if (!groupedPayments[userKey]) {
          groupedPayments[userKey] = [];
        }
        groupedPayments[userKey].push(payment);
      });
      
      const rowsToInsert = [];
      
      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏
      for (const [userKey, userPayments] of Object.entries(groupedPayments)) {
        const firstPayment = userPayments[0];
        const customerName = `${firstPayment.firstName || ''} ${firstPayment.lastName || ''}`.trim();
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É
        const planPrices = {
          test: 0.01,
          solo: 9.99,
          plus: 19.99,
          premium: 19.99
        };
        const price = planPrices[firstPayment.plan] || 9.99;
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
        const row = [
          firstPayment.bid || 'murkafix', // B - BID
          firstPayment.createdAt.toISOString(), // C - –¥–∞—Ç–∞
          price, // D - —Ü–µ–Ω–∞ –ø–µ—Ä–≤–æ–π –æ–ø–ª–∞—Ç—ã
          customerName, // E - –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞
          firstPayment.countryCode || 'US', // F - GEO
          firstPayment.plan || 'test', // G - SUBSCR
          firstPayment.subscriptionReferenceCode || '', // H - Subscription ID
          '', // I - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1 (–ø—É—Å—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          '', // J - –¥–∞—Ç–∞ (–ø—É—Å—Ç–æ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
          'Success' // K - –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ (—É—Å–ø–µ—Ö –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞)
        ];
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        for (let i = 1; i <= userPayments.length - 1; i++) {
          const payment = userPayments[i];
          const paymentPrice = planPrices[payment.plan] || 9.99;
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ I, J, K –¥–ª—è –≤—Ç–æ—Ä–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
          if (i === 1) {
            row[8] = paymentPrice; // I - –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–ª–∞—Ç–µ–∂ ‚Ññ1
            row[9] = payment.createdAt.toISOString(); // J - –¥–∞—Ç–∞
            row[10] = 'Success'; // K - —Å—Ç–∞—Ç—É—Å
          }
          // –î–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–æ–ª–æ–Ω–æ–∫ L-N, O-Q –∏ —Ç.–¥.
        }
        
        rowsToInsert.push(row);
      }
      
      if (rowsToInsert.length > 0) {
        await this.sheets.spreadsheets.values.update({
          spreadsheetId: this.spreadsheetId,
          range: 'B3',
          valueInputOption: 'RAW',
          resource: { values: rowsToInsert }
        });
      }
      
      console.log(`‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ó–∞–ø–∏—Å–∞–Ω–æ ${rowsToInsert.length} —Å—Ç—Ä–æ–∫`);
      
      return { success: true, rowsCount: rowsToInsert.length };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
      return { success: false, error: error.message };
    }
  }
}

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –º–µ–Ω–µ–¥–∂–µ—Ä–∞
const googleSheetsManager = new GoogleSheetsManager();

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –≤ Google Sheets
 */
async function addNewSubscriptionToSheet(subscriptionData) {
  try {
    const result = await googleSheetsManager.addPayment(subscriptionData);
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏:', error.message);
    return { success: false, error: error.message };
  }
}

/**
 * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏–∑ –ë–î –≤ Google Sheets
 */
async function syncAllPaymentsToSheets() {
  try {
    const result = await googleSheetsManager.syncAllPayments();
    return result;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error.message);
    return { success: false, error: error.message };
  }
}

module.exports = {
  addNewSubscriptionToSheet,
  syncAllPaymentsToSheets,
  googleSheetsManager,
  initializeHeaders: () => googleSheetsManager.initializeHeaders()
}; 